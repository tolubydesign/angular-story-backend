AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  serverless-go-demo

  AWS SAM template with a simple API definition for serverless-go-demo

Parameters:
  StageName:
    Type: String
    Default: dev
  ApiKeyAuthValue:
    Type: String
    Description: Environmental api key variable
    Default: serverlessgodemoapikey
  Env:
    Type: String
    Default: prod
    Description: (Required) An environment name for function operations
  JwtSecretKey:
    Type: String
    Default: string
    Description: (Required) JWT Secret key for keeping secrets
  DynamodbStoryTableName:
    Type: String
    Default: string
    Description: (Required) Remote DynamoDB Story table name
  DynamodbUserTableName:
    Type: String
    Default: string
    Description: (Required) Remote DynamoDB User table name

Globals:
  Function:
    MemorySize: 128
    Architectures: ["x86_64"]
    Timeout: 5
    Runtime: go1.x

Resources:
  # Authentication Function
  authentication:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        !Join ["", [{ "Ref": "AWS::StackName" }, "-authentication-function"]]
      Handler: bootstrap
      CodeUri: .
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "lambda:InvokeFunction"
              Resource: "*"
      Environment:
        Variables:
          API_KEY: !Ref ApiKeyAuthValue
    Metadata:
      BuildMethod: makefile

  # Lambda Function
  call:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Join ["", [{ "Ref": "AWS::StackName" }, "-call-function"]]
      Handler: bootstrap
      CodeUri: .
      Policies:
        - AWSLambdaBasicExecutionRole
        - CloudWatchPutMetricPolicy: {}
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamodbStoryTableName
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamodbUserTableName
      Events:
        GetApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessHttpApi
            Method: GET
            Path: /
            RequestParameters:
              - method.request.header.Authorization
            Auth:
              ApiKeyRequired: false
        Ping:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessHttpApi
            Method: GET
            Path: /ping
            RequestParameters:
              - method.request.header.Authorization
            Auth:
              ApiKeyRequired: false
        GetAllStories:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessHttpApi
            Method: GET
            Path: /list-stories
            RequestParameters:
              - method.request.header.Authorization
            Auth:
              ApiKeyRequired: false
        GetStory:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessHttpApi
            Method: GET
            Path: /get-story
            RequestParameters:
              - method.request.header.Authorization
              - method.request.header.id
            Auth:
              ApiKeyRequired: false
      Environment:
        Variables:
          DYNAMODB_STORY_TABLE_NAME: !Ref DynamodbStoryTableName
          DYNAMODB_USER_TABLE_NAME: !Ref DynamodbUserTableName
          ENV: !Ref Env
          JWT_SECRET_KEY: !Ref JwtSecretKey
    Metadata:
      BuildMethod: makefile
  # Permission to allow Lambda invocation from API Gateway
  callPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref call
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessHttpApi}/*/GET/

  # REST API
  ServerlessHttpApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Join ["", [{ "Ref": "AWS::StackName" }, "-rest-api"]]
      Description: API Gateway using Lambda Authorizer and Mapping Template to inject customer HTTP headers with additional data.
      StageName: !Ref StageName
      MethodSettings:
        - ResourcePath: /
          HttpMethod: GET
          LoggingLevel: INFO
          DataTraceEnabled: true
          MetricsEnabled: true
          ThrottlingBurstLimit: 200
          ThrottlingRateLimit: 100
      Auth:
        ApiKeyRequired: true
        DefaultAuthorizer: BasicRequestAuth
        Authorizers:
          BasicRequestAuth:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt authentication.Arn
            Identity:
              Headers:
                - Authorization

  # Lambda Token Authorizer
  ServerlessAuthorizersLambdaToken:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: LambdaAuthorizerToken
      Type: REQUEST
      RestApiId: !Ref ServerlessHttpApi
      IdentitySource: method.request.header.Authorization
      AuthorizerResultTtlInSeconds: 400
      AuthorizerUri:
        !Join [
          "",
          [
            "arn:aws:apigateway:",
            !Ref AWS::Region,
            ":lambda:path/2015-03-31/functions/",
            !GetAtt authentication.Arn,
            "/invocations",
          ],
        ]

  ServerlessDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ServerlessHttpApi

  # StoryDynamoDBTable:
  #   Type: AWS::DynamoDB::Table
  #   DeletionPolicy: Retain
  #   Properties:
  #     TableName: Story
  #     AttributeDefinitions:
  #       - AttributeName: id
  #         AttributeType: S
  #       - AttributeName: creator
  #         AttributeType: S
  #     KeySchema:
  #       - AttributeName: id
  #         KeyType: HASH
  #       - AttributeName: creator
  #         KeyType: RANGE
  #     BillingMode: PAY_PER_REQUEST
  #     ProvisionedThroughput:
  #       ReadCapacityUnits: 0
  #       WriteCapacityUnits: 0

  # UserDynamoDBTable:
  #   Type: AWS::DynamoDB::Table
  #   DeletionPolicy: Retain
  #   Properties:
  #     TableName: User
  #     AttributeDefinitions:
  #       - AttributeName: id
  #         AttributeType: S
  #       - AttributeName: email
  #         AttributeType: S
  #     KeySchema:
  #       - AttributeName: id
  #         KeyType: HASH
  #       - AttributeName: email
  #         KeyType: RANGE
  #     BillingMode: PAY_PER_REQUEST
  #     ProvisionedThroughput:
  #       ReadCapacityUnits: 0
  #       WriteCapacityUnits: 0

Outputs:
  HttpApiUrl:
    Description: URL of your API endpoint
    Value:
      Fn::Sub: "https://${ServerlessHttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${StageName}"
  HttpApiId:
    Description: Api id of HttpApi
    Value:
      Ref: ServerlessHttpApi
