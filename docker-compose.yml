# Use postgres/example user/password credentials
# Resource: https://github.com/jdaarevalo/docker_postgres_with_data
version: '3'
services:
  # DynamoDB 
  # https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBLocal.UsageNotes.html
  # https://davidagood.com/dynamodb-local-go/
  # 
  # Note:
  #   If error found similar to this 
  #   WARNING: [sqlite] cannot open DB[142]: com.almworks.sqlite4java.SQLiteException: [14] unable to open database file
  #   OR
  #   SEVERE: [sqlite] SQLiteQueue[shared-local-instance.db]: error running job queue
  # Do: $ sudo chown $USER docker -R && chmod 775 -R docker OR $ sudo chmod 777 ./docker/dynamodb
  # 
  # Connect to database: $ aws dynamodb list-tables --endpoint-url http://localhost:8000
  dynamodb-local:
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
    image: "amazon/dynamodb-local:latest"
    container_name: dynamodb-local
    ports:
      - "8000:8000"
    volumes:
      - $PWD/docker/dynamodb:/home/dynamodblocal/data
    working_dir: /home/dynamodblocal

  # Dynamodb Node JS server. Handle incoming and outgoing requesting
  app-node:
    depends_on:
      - dynamodb-local
    image: amazon/aws-cli
    container_name: app-node
    ports:
      - "8080:8080"
    environment:
      AWS_ACCESS_KEY_ID: 'DUMMYIDEXAMPLE'
      AWS_SECRET_ACCESS_KEY: 'DUMMYEXAMPLEKEY'
    command: dynamodb describe-limits --endpoint-url http://dynamodb-local:8000 --region us-west-2

  # Redis
  # https://github.com/robcowart/docker_compose_cookbook/blob/master/redis/docker-compose.yml
  # https://geshan.com.np/blog/2022/01/redis-docker/
  # https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBLocal.DownloadingAndRunning.html
  # redis:
  #   image: redis:7
  #   container_name: redisstorycontainer
  #   # restart: always # unless-stopped
  #   # hostname: redis
  #   # network_mode: bridge
  #   ports:
  #     - '6379:6379'
  #     # - 6379:6379/tcp
  #     # - '6379:6379'
  #     # - '8001:8001'
  #     # command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
  #   volumes:
  #     - redis_database:/data

  # AWS S3 or Minio
  minio:
    image: minio/minio:latest
    container_name: miniostorycontainer
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - '$PWD/docker/minio:/data'
    environment:
      MINIO_ROOT_USER: masoud
      MINIO_ROOT_PASSWORD: StrongPassword#111
    command: server --console-address ":9001" /data
  # adminer:
  #   image: adminer
  #   restart: always
  #   ports:
  #     - 8080:8080

volumes:
  postgres_database:
    driver: local
  minio_storage: {}
  redis_database:
    driver: local
